import DropDown from '@/components/dropDown';
import Footer from '@/components/footer';
import NavBar from '@/components/nav';
import useAuth from '@/hooks/useAuth';
import useRefreshToken from '@/hooks/useRefreshToken';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import axios from '../api/axios';

function Profile() {
  const { auth } = useAuth();
  const { query } = useRouter();
  const { user } = query;
  !user ? <div>User not Found</div> : <></>;
  const [data, setData] = useState({});
  const [username, setUsername] = useState('');
  const [fullName, setFullName] = useState('');
  const [email, setEmail] = useState('');
  const [mobile, setMobile] = useState(null);
  const [address, setAddress] = useState('');
  const [errMsg, setErrMsg] = useState('');
  const [visible, setVisible] = useState(false);
  const showBar = () => setVisible(!visible);
  const router = useRouter();

  useEffect(() => {
    let isMounted = true;
    const controller = new AbortController();

    const getUser = async () => {
      try {
        const response = await axios.get('/user', {
          signal: controller.signal,
          headers: { Authorization: `Bearer ${auth.accessToken}` },
          withCredentials: true,
        });
        isMounted && setData(response.data);
        isMounted && setUsername(response.data.username);
        isMounted && setFullName(response.data.fullName);
        isMounted && setEmail(response.data.email);
        isMounted && setMobile(response.data.mobile);
        isMounted && setAddress(response.data.address);
      } catch (error) {
        console.error(error);
        // error ? setErrMsg('Login again to retrieve data') : setErrMsg('');
      }
    };
    getUser();

    return () => {
      isMounted = false;
      isMounted && controller.abort();
    };
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const response = await axios.put(
      '/updateUser',
      {
        username: username,
        fullName: fullName,
        email: email,
        mobile: mobile,
        address: address,
      },
      {
        headers: { Authorization: `Bearer ${auth.accessToken}` },
        withCredentials: true,
      }
    );
  };

  return (
    <>
      <Head>
        <title>{`${data.username} | Arzu`}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="min-h-screen flex flex-col ">
        <div className="fixed top-0 z-10 w-full">
          <NavBar showBar={showBar} />
        </div>
        {visible ? (
          <div className=" fixed overscroll-contain bg-opacity-80 bg-white h-screen  top-0 z-20 min-w-full">
            <DropDown showBar={showBar} />
          </div>
        ) : (
          <></>
        )}
        <div className="relative top-10">
          <h1 className=" text-center text-3xl m-2 font-poppins">
            {data.fullName}'s Profile Page
          </h1>
          <p className="text-center text-red-500">{errMsg}</p>

          <form
            className=" mx-4 bg-gray-100 font-poppins p-4 rounded-md"
            onSubmit={handleSubmit}
          >
            <div>
              <label className="font-bold " htmlFor="fullName">
                Username:{' '}
              </label>
              <br />
              <input
                className="bg-gray-100  ml-2 rounded-md  "
                type="text"
                defaultValue={data.username || ''}
                onChange={(e) => {
                  setUsername(e.target.value);
                }}
              />
            </div>
            <br />
            <div>
              <label className="font-bold " htmlFor="fullName">
                Full name:{' '}
              </label>
              <br />
              <input
                className="bg-gray-100  ml-2 rounded-md  "
                type="text"
                defaultValue={data.fullName || ''}
                onChange={(e) => {
                  setFullName(e.target.value);
                }}
              />
            </div>

            <br />
            <div>
              <label className="font-bold " htmlFor="email">
                Email:{' '}
              </label>
              <br />
              <input
                className="bg-gray-100  ml-2 rounded-md  "
                type="text"
                defaultValue={data.email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
            <br />
            <div>
              <label className="font-bold " htmlFor="mobile">
                Mobile:{' '}
              </label>
              <br />
              <input
                className="bg-gray-100  ml-2 rounded-md  "
                type="text"
                defaultValue={data.mobile}
                onChange={(e) => setMobile(e.target.value)}
              />
            </div>
            <br />
            <div>
              <label className="font-bold " htmlFor="address">
                Address:{' '}
              </label>
              <br />
              <input
                className="bg-gray-100  ml-2 rounded-md  "
                type="text"
                defaultValue={data.address}
                onChange={(e) => setAddress(e.target.value)}
              />
            </div>

            <br />
            <button className=" bg-gray-300 rounded-md w-max p-2 active:bg-black active:text-white">
              Update
            </button>
          </form>
        </div>
        <br />

        <div className="fixed bottom-0 w-full mt-8">
          <Footer />
        </div>
      </div>
    </>
  );
}

export default dynamic(() => Promise.resolve(Profile), { ssr: false });
