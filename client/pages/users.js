import Layout from '@/components/adminFiles/layout';
import useAxiosPrivate from '@/hooks/useAxiosPrivate';
import {
  Box,
  Card,
  Checkbox,
  Stack,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TablePagination,
  TableRow,
  Typography,
} from '@mui/material';
import Head from 'next/head';
import { useCallback } from 'react';
import { useMemo } from 'react';
import { useState, useEffect } from 'react';
import { BsThreeDots } from 'react-icons/bs';

const Users = () => {
  const axiosPrivate = useAxiosPrivate();
  const [allUsers, setAllusers] = useState([]);
  const [users, setUsers] = useState([]);
  const [userId, setUserId] = useState('');
  const [dotsClicked, setDotsClicked] = useState(null);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(5);

  const getUsers = async () => {
    const response = await axiosPrivate.get('/users');
    setUsers([...response.data].reverse());
  };

  useEffect(() => {
    getUsers();
  }, []);
  const count = users.length;

  const handlePageChange = useCallback((event, value) => {
    setPage(value);
  }, []);

  const handleRowsPerPageChange = useCallback((event) => {
    setRowsPerPage(event.target.value);
  }, []);
  const setAllUsersHandler = () => {
    setAllusers(
      users.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
    );
  };
  useMemo(() => {
    setAllUsersHandler();
  }, [users, page, rowsPerPage]);

  const handleDots = (user) => {
    setUserId(user._id);
    setDotsClicked(dotsClicked === user?._id ? null : user?._id);
    // orderSelection.handleDeselectAll();
    // orderSelection.handleSelectOne(order?.invoiceNumber);
  };

  const handleDelete = async () => {
    try {
      await axiosPrivate.delete('/delete', { data: { id: userId } });
      getUsers();
    } catch (error) {
      console.log(error);
    }
  };

  const assignAdmin = async () => {
    try {
      await axiosPrivate.put('/makeAdmin', { id: userId });
      getUsers();
    } catch (error) {
      console.log(error);
    }
  };
  const removeAdmin = async () => {
    try {
      await axiosPrivate.put('/removeAdmin', { id: userId });
      getUsers();
    } catch (error) {
      console.log(error);
    }
  };
  const assignEditor = async () => {
    try {
      await axiosPrivate.put('/makeEditor', { id: userId });
      getUsers();
    } catch (error) {
      console.log(error);
    }
  };
  const removeEditor = async () => {
    try {
      await axiosPrivate.put('/removeEditor', { id: userId });
      getUsers();
    } catch (error) {
      console.log(error);
    }
  };
  console.log(userId);
  return (
    <>
      <Head>
        <title>{'Users|Arzu'}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="mt-8 ml-8">
          <h1 className=" text-center font-poppins font-semibold text-3xl mb-4">
            Users List
          </h1>
          <h1 className="ml-1 mb-2 font-poppins font-semibold text-lg">
            {users.length} Users
          </h1>
          <Card>
            <Box sx={{ minWidth: 1000 }}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell padding="checkbox">
                      <Checkbox />
                    </TableCell>
                    <TableCell className=" font-poppins font-semibold">
                      User
                    </TableCell>

                    <TableCell className=" font-poppins font-semibold">
                      Email
                    </TableCell>
                    <TableCell className=" font-poppins font-semibold">
                      PHONE
                    </TableCell>
                    <TableCell className=" font-poppins font-semibold">
                      Role
                    </TableCell>
                    <TableCell className=" font-poppins font-semibold">
                      Settings
                    </TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {allUsers.map((user) => {
                    return (
                      <TableRow hover>
                        <TableCell padding="checkbox">
                          <Checkbox />
                        </TableCell>
                        <TableCell>
                          <Stack
                            alignItems="center"
                            direction="row"
                            spacing={2}
                          >
                            <Typography
                              className=" font-poppins cursor-pointer"
                              variant="subtitle2"
                            >
                              {user.fullName || user.username}
                            </Typography>
                          </Stack>
                        </TableCell>

                        <TableCell className=" font-poppins">
                          {user.email}
                        </TableCell>
                        <TableCell
                          className={
                            !user.mobile
                              ? 'text-red-500 font-poppins'
                              : 'font-poppins'
                          }
                        >
                          {user.mobile || 'Not given'}
                        </TableCell>
                        <TableCell>
                          <p
                            className={
                              user.roles.Admin
                                ? ' font-poppins text-blue-500'
                                : user.roles.Editor
                                ? ' font-poppins text-blue-500'
                                : ' font-poppins text-green-500'
                            }
                          >
                            {user.roles.Admin
                              ? 'Admin'
                              : user.roles.Editor
                              ? 'Editor'
                              : 'User'}
                          </p>
                        </TableCell>
                        <TableCell>
                          <span
                            onClick={() => handleDots(user)}
                            className="cursor-pointer "
                          >
                            <BsThreeDots size={22} />
                            {dotsClicked === user._id && (
                              <div className="absolute w-max z-20  space-y-2  shadow-md bg-white p-3 rounded-md">
                                {!user.roles.Admin && (
                                  <p className=" hover:bg-gray-100 p-1 rounded-md cursor-pointer">
                                    {user.roles.Editor ? (
                                      <p
                                        onClick={removeEditor}
                                        className=" hover:bg-gray-100 p-1 rounded-md cursor-pointer  "
                                      >
                                        Remove editor
                                      </p>
                                    ) : (
                                      <p
                                        onClick={assignEditor}
                                        className=" hover:bg-gray-100 p-1 rounded-md cursor-pointer  "
                                      >
                                        Assign editor
                                      </p>
                                    )}
                                  </p>
                                )}

                                {user.roles.Admin ? (
                                  <p
                                    onClick={removeAdmin}
                                    className=" hover:bg-gray-100 p-1 rounded-md cursor-pointer  "
                                  >
                                    Remove admin
                                  </p>
                                ) : (
                                  <p
                                    onClick={assignAdmin}
                                    className=" hover:bg-gray-100 p-1 rounded-md cursor-pointer  "
                                  >
                                    Assign admin
                                  </p>
                                )}

                                <p
                                  onClick={handleDelete}
                                  className=" hover:bg-gray-100 p-1 rounded-md cursor-pointer  "
                                >
                                  Delete User
                                </p>
                              </div>
                            )}
                          </span>
                        </TableCell>
                      </TableRow>
                    );
                  })}
                </TableBody>
              </Table>
            </Box>
            <TablePagination
              component="div"
              count={count}
              onPageChange={handlePageChange}
              onRowsPerPageChange={handleRowsPerPageChange}
              page={page}
              rowsPerPage={rowsPerPage}
              rowsPerPageOptions={[5, 10, 25]}
            />
          </Card>
        </div>
      </Layout>
    </>
  );
};

export default Users;
