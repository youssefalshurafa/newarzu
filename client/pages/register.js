import React from 'react';
import Footer from '@/components/footer';
import NavBar from '@/components/nav';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import {
  faCheck,
  faTimes,
  faInfoCircle,
  faEye,
} from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { useEffect, useState } from 'react';
import axios from './api/axios';
import { library } from '@fortawesome/fontawesome-svg-core';
import useAuth from '@/hooks/useAuth';
import { useRouter } from 'next/router';
const USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;
const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;
const EMAIL_REGEX = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
const REGISTER_URL = '/register';
library.add(faCheck, faTimes, faInfoCircle, faEye);

const Register = () => {
  const { setAuth } = useAuth();
  const router = useRouter();

  const [visible, setVisible] = useState(false);
  const showBar = () => setVisible(!visible);

  const [user, setUser] = useState('');
  const [validName, setValidName] = useState(false);

  const [pwd, setPwd] = useState('');
  const [validPwd, setValidPwd] = useState(false);
  const [showPwd, setShowPwd] = useState(false);

  const [email, setEmail] = useState('');
  const [validEmail, setValidEmail] = useState('');

  const [matchpwd, setMatchPwd] = useState('');
  const [validMatch, setValidMatch] = useState(false);

  const [errMsg, setErrMsg] = useState('');

  useEffect(() => {
    const result = USER_REGEX.test(user);
    setValidName(result);
  }, [user]);

  useEffect(() => {
    const result = EMAIL_REGEX.test(email);
    setValidEmail(result);
  }, [email]);

  useEffect(() => {
    const result = PWD_REGEX.test(pwd);
    setValidPwd(result);
    const match = pwd === matchpwd;
    setValidMatch(match);
  }, [pwd, matchpwd]);

  const showPwdHandler = () => {
    setShowPwd(!showPwd);
  };
  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const response = await axios.post(
        REGISTER_URL,
        JSON.stringify({ username: user, pwd, email }),
        {
          headers: { 'Content-Type': 'application/json' },
          withCredentials: true,
        }
      );

      console.log(JSON.stringify(response?.data));

      setAuth({ user, pwd, email });
      setUser('');
      setPwd('');
      setMatchPwd('');
      setEmail('');
      router.push('/login');
    } catch (err) {
      if (!err?.response) {
        setErrMsg('No server response');
      } else if (err.response?.status === 409) {
        setErrMsg('Username already exists');
        setValidName(false);
      } else if (err.response?.status === 408) {
        setErrMsg('Email address already exists');
      } else {
        setErrMsg('Login Failed');
      }
    }
  };
  return (
    <>
      <Head>
        <title>{'Login | Arzu'}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="min-h-screen flex flex-col justify-between">
        <div className="  w-full">
          <NavBar showBar={showBar} />
        </div>
        <div className=" mx-auto bg-gray-100 m-9 font-poppins  px-8  pb-4 rounded-md border shadow-md">
          <h1 className=" font-serif text-center pt-4 text-2xl">Register</h1>
          <p className=" text-center text-red-500">{errMsg}</p>
          <form onSubmit={handleSubmit} className=" pt-3 text-lg">
            <label htmlFor="username">Username:</label>
            <span className={validName ? 'text-lime-500 ml-1' : ' hidden'}>
              <FontAwesomeIcon icon="check" size="lg" />
            </span>
            <span
              className={validName || !user ? 'hidden' : ' text-red-500 ml-1'}
            >
              <FontAwesomeIcon icon="times" size="lg" />
            </span>
            <br />
            <input
              className="bg-gray-100 border  rounded-md  text-center "
              type="text"
              id="username"
              autoComplete="off"
              onChange={(e) => setUser(e.target.value)}
              required
            />

            <br />
            <p
              id="uidnote"
              className={
                user && !validName
                  ? ' bg-black text-white text-xs p-1  mt-4 rounded-md'
                  : 'hidden'
              }
            >
              <FontAwesomeIcon icon={faInfoCircle} />
              4 to 24 characters.
              <br />
              Must Begin with a letter.
              <br />
              Letters, numbers, underscores, hyphens allowed.
            </p>
            <label htmlFor="email">Email address:</label>
            <span className={validEmail ? 'text-lime-500 ml-1' : ' hidden'}>
              <FontAwesomeIcon icon="check" size="lg" />
            </span>
            <span
              className={validEmail || !email ? 'hidden' : ' text-red-500 ml-1'}
            >
              <FontAwesomeIcon icon="times" size="lg" />
            </span>
            <br />

            <input
              className="bg-gray-100 border  rounded-md  text-center"
              type="text"
              id="email"
              autoComplete="off"
              onChange={(e) => setEmail(e.target.value)}
              required
            />
            <br />
            <label htmlFor="password">Password:</label>
            <span className={validPwd ? 'text-lime-500 ml-1' : ' hidden'}>
              <FontAwesomeIcon icon="check" size="lg" />
            </span>
            <span
              className={validPwd || !pwd ? 'hidden' : ' text-red-500 ml-1'}
            >
              <FontAwesomeIcon icon="times" size="lg" />
            </span>
            <br />
            <div className=" flex">
              <input
                className="bg-gray-100 border  rounded-md text-center "
                type={showPwd ? 'text' : 'password'}
                id="password"
                autoComplete="off"
                onChange={(e) => setPwd(e.target.value)}
                required
              />
              <span className="relative right-6" onClick={showPwdHandler}>
                <FontAwesomeIcon icon="eye" size="sm" />
              </span>
            </div>

            <br />
            <p
              id="pwdnote"
              className={
                !validPwd && pwd
                  ? 'bg-black text-white text-xs p-1  mt-4 rounded-md'
                  : 'hidden'
              }
            >
              <FontAwesomeIcon icon={faInfoCircle} />
              8 to 24 characters.
              <br />
              Must include uppercase and lowercase letters,
              <br />
              a number and a special character.
              <br />
              Allowed special characters:{' '}
            </p>
            <label htmlFor="confirmPassword">Confirm Password:</label>
            <span
              className={
                validMatch && matchpwd && validPwd
                  ? 'text-lime-500 ml-1'
                  : ' hidden'
              }
            >
              <FontAwesomeIcon icon="check" size="lg" />
            </span>
            <span
              className={
                validMatch || !matchpwd ? 'hidden' : ' text-red-500 ml-1'
              }
            >
              <FontAwesomeIcon icon="times" size="lg" />
            </span>
            <br />
            <div className="flex">
              <input
                className="bg-gray-100 border  rounded-md text-center "
                type={showPwd ? 'text' : 'password'}
                id="confirmPassword"
                autoComplete="off"
                onChange={(e) => setMatchPwd(e.target.value)}
                required
              />
              <span
                className=" relative right-6 hover:text-blue-500 active:text-blue-500"
                onClick={showPwdHandler}
              >
                <FontAwesomeIcon icon="eye" size="sm" />
              </span>
            </div>

            <br />
            <p
              id="pwdnote"
              className={
                !validMatch && matchpwd
                  ? 'bg-black text-white text-xs p-1  mt-4 rounded-md'
                  : 'hidden'
              }
            >
              <FontAwesomeIcon icon={faInfoCircle} />
              Must match the first password
              <br />
              input field
              <br />
            </p>
            <div className="text-center pt-3">
              <button
                disabled={
                  !validName || !validEmail || !validPwd || !validMatch
                    ? true
                    : false
                }
                className=" cursor-pointer bg-blue-500 text-white rounded-md w-full py-2 active:bg-black active:text-white disabled:cursor-not-allowed disabled:opacity-25 "
              >
                Sign Up
              </button>
            </div>
          </form>
        </div>
        <div className="">
          <Footer />
        </div>
      </div>
    </>
  );
};

export default dynamic(() => Promise.resolve(Register), { ssr: false });
